/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// Ahh, now onto the cool part, defining a service. Services just need a name
/// and can optionally inherit from another service using the extends keyword.
/// </summary>
public partial class ReportOutput : TBase
{
    private byte[] _result;

    public byte[] Result
    {
        get
        {
            return _result;
        }
        set
        {
            __isset.result = true;
            this._result = value;
        }
    }


    public Isset __isset;
    public struct Isset
    {
        public bool result;
    }

    public ReportOutput()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
        iprot.IncrementRecursionDepth();
        try
        {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
                field = await iprot.ReadFieldBeginAsync(cancellationToken);
                if (field.Type == TType.Stop)
                {
                    break;
                }

                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Result = await iprot.ReadBinaryAsync(cancellationToken);
                        }
                        else
                        {
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                        }
                        break;
                    default:
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                        break;
                }

                await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
            iprot.DecrementRecursionDepth();
        }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
        oprot.IncrementRecursionDepth();
        try
        {
            var struc = new TStruct("ReportOutput");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if (Result != null && __isset.result)
            {
                field.Name = "result";
                field.Type = TType.String;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteBinaryAsync(Result, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
            oprot.DecrementRecursionDepth();
        }
    }

    public override bool Equals(object that)
    {
        var other = that as ReportOutput;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.result == other.__isset.result) && ((!__isset.result) || (TCollections.Equals(Result, other.Result))));
    }

    public override int GetHashCode()
    {
        int hashcode = 157;
        unchecked
        {
            if (__isset.result)
                hashcode = (hashcode * 397) + Result.GetHashCode();
        }
        return hashcode;
    }

    public override string ToString()
    {
        var sb = new StringBuilder("ReportOutput(");
        bool __first = true;
        if (Result != null && __isset.result)
        {
            if (!__first) { sb.Append(", "); }
            __first = false;
            sb.Append("Result: ");
            sb.Append(Result);
        }
        sb.Append(")");
        return sb.ToString();
    }
}

