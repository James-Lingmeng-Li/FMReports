/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ReportingService {
  public interface ISync {
    /// <summary>
    /// A method definition looks like C code. It has a return type, arguments,
    /// and optionally a list of exceptions that it may throw. Note that argument
    /// lists and exception lists are specified using the exact same syntax as
    /// field lists in struct or exception definitions.
    /// </summary>
    void ping();
    byte[] getBatchReports(string _reportName, string _date);
    /// <summary>
    /// This method has a oneway modifier. That means the client only makes
    /// a request and does not listen for any response at all. Oneway methods
    /// must be void.
    /// </summary>
    void zip();
  }

  public interface Iface : ISync {
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion




    /// <summary>
    /// A method definition looks like C code. It has a return type, arguments,
    /// and optionally a list of exceptions that it may throw. Note that argument
    /// lists and exception lists are specified using the exact same syntax as
    /// field lists in struct or exception definitions.
    /// </summary>
    public void ping()
    {
      send_ping();
      recv_ping();
    }

    public void send_ping()
    {
      oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
      ping_args args = new ping_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();

      oprot_.Transport.Flush();
ReportExecutorBatchJob
    }

    public void recv_ping()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ping_result result = new ping_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    public byte[] getBatchReports(string _reportName, string _date)
    {
      send_getBatchReports(_reportName, _date);
      return recv_getBatchReports();
    }

    public void send_getBatchReports(string _reportName, string _date)
    {
      oprot_.WriteMessageBegin(new TMessage("getBatchReports", TMessageType.Call, seqid_));
      getBatchReports_args args = new getBatchReports_args();
      args._reportName = _reportName;
      args._date = _date;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();

      oprot_.Transport.Flush();
    }

    public byte[] recv_getBatchReports()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBatchReports_result result = new getBatchReports_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBatchReports failed: unknown result");
    }


    /// <summary>
    /// This method has a oneway modifier. That means the client only makes
    /// a request and does not listen for any response at all. Oneway methods
    /// must be void.
    /// </summary>
    public void zip()
    {
      send_zip();
    }
    public void send_zip()
    {
      oprot_.WriteMessageBegin(new TMessage("zip", TMessageType.Oneway, seqid_));
      zip_args args = new zip_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["ping"] = ping_Process;
      processMap_["getBatchReports"] = getBatchReports_Process;
      processMap_["zip"] = zip_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ping_args args = new ping_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ping_result result = new ping_result();
      try
      {
        iface_.ping();
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBatchReports_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBatchReports_args args = new getBatchReports_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBatchReports_result result = new getBatchReports_result();
      try
      {
        result.Success = iface_.getBatchReports(args._reportName, args._date);
        oprot.WriteMessageBegin(new TMessage("getBatchReports", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBatchReports", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void zip_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      zip_args args = new zip_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      try
      {
        iface_.zip();
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
      }
    }

  }



  [Serializable]

  public partial class ping_args : TBase
  {

    public ping_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ping_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }



  [Serializable]

  public partial class ping_result : TBase
  {

    public ping_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ping_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }



  [Serializable]

  public partial class getBatchReports_args : TBase
  {
    private string __reportName;
    private string __date;

    public string _reportName
    {
      get
      {
        return __reportName;
      }
      set
      {
        __isset._reportName = true;
        this.__reportName = value;
      }
    }

    public string _date
    {
      get
      {
        return __date;
      }
      set
      {
        __isset._date = true;
        this.__date = value;
      }
    }


    public Isset __isset;

    [Serializable]

    public struct Isset {
      public bool _reportName;
      public bool _date;
    }

    public getBatchReports_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                _reportName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                _date = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBatchReports_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_reportName != null && __isset._reportName) {
          field.Name = "_reportName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_reportName);
          oprot.WriteFieldEnd();
        }
        if (_date != null && __isset._date) {
          field.Name = "_date";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(_date);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBatchReports_args(");
      bool __first = true;
      if (_reportName != null && __isset._reportName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("_reportName: ");
        __sb.Append(_reportName);
      }
      if (_date != null && __isset._date) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("_date: ");
        __sb.Append(_date);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }



  [Serializable]

  public partial class getBatchReports_result : TBase
  {
    private byte[] _success;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool success;
    }

    public getBatchReports_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBatchReports_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBatchReports_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }



  [Serializable]
  public partial class zip_args : TBase
  {

    public zip_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("zip_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("zip_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
