package com.finmechanics.fmcThriftClient;

import com.finmechanics.fmcThriftInterface.*;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TMultiplexedProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;


public class FmcThriftClientTest {
    public static void main(String [] args) {
        try {
            TTransport transport;
        /*
         * Similar to the server, you can use the parameters to setup client parameters or
         * use the default settings. On the client side, you will need a TrustStore which
         * contains the trusted certificate along with the public key.
         * For this example it's a self-signed cert.
         */
                TSSLTransportFactory.TSSLTransportParameters params = new TSSLTransportFactory.TSSLTransportParameters();
				params.setTrustStore("C:\\FM\\Thrift Files\\thrift-0.11.0\\lib\\java\\test\\.truststore", "thrift", "SunX509", "JKS");
        /*
         * Get a client transport instead of a server transport. The connection is opened on
         * invocation of the factory method, no need to specifically call open()
         */
            transport = TSSLTransportFactory.getClientSocket("localhost", 9091, 0, params);
            TProtocol protocol = new TBinaryProtocol(transport);
            TMultiplexedProtocol mp4 = new TMultiplexedProtocol(protocol, "ReportingService");
            ReportingService.Client reportingClient = new ReportingService.Client(mp4);

            perform(reportingClient);
            transport.close();
        } catch (TException x) {
                x.printStackTrace();
        } catch (InvalidFormatException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void perform(ReportingService.Client client) throws TException, IOException, InvalidFormatException {

        System.out.println("Started");
        java.nio.ByteBuffer output = client.getBatchReports("SpotVolReport","2020-07-20 18:00:00");
        writeReport(output);
        System.out.println("Completed");
    }

    private static void writeReport(java.nio.ByteBuffer output) throws IOException, InvalidFormatException {
        InputStream myInputStream = new ByteArrayInputStream(output.array());
        String ReportsFolder = "C://ReportsFolder//";

        Workbook wbook = new XSSFWorkbook();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String outputFileName = ReportsFolder+"SpotVolReport"+dtf.format(now)+".xlsx";
        FileOutputStream opStr = new FileOutputStream(outputFileName);
        IOUtils.copy(myInputStream, opStr);
        wbook.write(opStr);
        wbook.close();



/*
        Stream myInputStream = new MemoryStream(byteArray); //FOR cs
        ExcelPackage package = new ExcelPackage(myInputStream);
            */
    }

}
